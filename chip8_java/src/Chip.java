package chip8_java.src;

import java.util.Stack;
import java.lang.Math;
import java.util.Arrays;

public class Chip {
    
    // Default resolution
    public static final int DISPLAY_COLS_LO_RES = 64;
    public static final int DISPLAY_ROWS_LO_RES = 32;
    
    // SuperChip high-res mode
    public static final int DISPLAY_COLS_HI_RES = 128;
    public static final int DISPLAY_ROWS_HI_RES = 64;
    
    // Memory
    public static final int MEMORY_SIZE = 4096; // 4KB of memory
    public static final int PROGRAM_START_ADDRESS = 0x200; // Load programs into memory starting at 0x200

    // Font data
    public static final int FONT_START_ADDRESS = 0x50; // Fonts start at 0x50 and end at 0x9F 
    public static final int LARGE_FONT_START_ADDRESS = 0x100; // Big fonts start here
   
    public static final int FONT_SIZE = 80; // 80 bytes
    public static final int LARGE_FONT_SIZE = 100; // 100 bytes. Big font only has 0-10
    
    public static final int CHARACTER_FONT_HEIGHT = 5; // 5 pixels tall
    public static final int LARGE_CHARACTER_FONT_HEIGHT = 10; // 10 pixels tall

    // States
    public static final int NUM_INPUTS = 16;
    public static final int NUM_REGISTERS = 16;

    // Fonts
    // Each character is 4 pixels wide and 5 pixels tall
    public static final int[] FONT_SET = {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    public static final int[] LARGE_FONT_SET_OCTO = {
        0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, // 0
        0x18, 0x78, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, // 1
        0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, // 2
        0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 3
        0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, // 4
        0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 5
        0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, // 6
        0xFF, 0xFF, 0x03, 0x03, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x18, // 7
        0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, // 8
        0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 9
        0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3, // A
        0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, // B 
        0x3C, 0xFF, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC3, 0xFF, 0x3C, // C
        0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE, 0xFC, // D
        0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, // E
        0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, // F
    };

    public static final int[] LARGE_FONT_SET_SCHIP = {
		0x3C, 0x7E, 0xE7, 0xC3, 0xC3, 0xC3, 0xC3, 0xE7, 0x7E, 0x3C,
		0x18, 0x38, 0x58, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C,
		0x3E, 0x7F, 0xC3, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xFF, 0xFF,
		0x3C, 0x7E, 0xC3, 0x03, 0x0E, 0x0E, 0x03, 0xC3, 0x7E, 0x3C,
		0x06, 0x0E, 0x1E, 0x36, 0x66, 0xC6, 0xFF, 0xFF, 0x06, 0x06,
		0xFF, 0xFF, 0xC0, 0xC0, 0xFC, 0xFE, 0x03, 0xC3, 0x7E, 0x3C,
		0x3E, 0x7C, 0xE0, 0xC0, 0xFC, 0xFE, 0xC3, 0xC3, 0x7E, 0x3C,
		0xFF, 0xFF, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x60, 0x60,
		0x3C, 0x7E, 0xC3, 0xC3, 0x7E, 0x7E, 0xC3, 0xC3, 0x7E, 0x3C,
		0x3C, 0x7E, 0xC3, 0xC3, 0x7F, 0x3F, 0x03, 0x03, 0x3E, 0x7C,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // no hex chars!
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };

    public byte[] memory;
    public boolean[][] display;
    public int pc; // 16-bit program counter
    public int I; // 16-bit address
    public int stack_pointer; // 16-bit stack pointer

    public Stack<Integer> stack; 
    public int delayTimer; // 8-bit timer
    public int soundTimer; // 8-bit timer
    public int[] registers; // 16 8-bit registers, VF is used as a flag register: set to 1 or 0 based on rules (e.g. carry flag)
    public boolean[] inputs; // 16 possible inputs
    public int opcode;
    public int[] flags; // Semi-persistent registers

    public Chip() {
        this.memory = new byte[MEMORY_SIZE];
        this.stack = new Stack<>();
        this.registers = new int[NUM_REGISTERS];
        this.display = new boolean[DISPLAY_ROWS_HI_RES][DISPLAY_COLS_HI_RES];
        this.inputs = new boolean[NUM_INPUTS];
        this.pc = PROGRAM_START_ADDRESS;


        // Format memory with fonts
        for (int i = 0; i < FONT_SIZE; i++) {
            this.memory[i + FONT_START_ADDRESS] = (byte)FONT_SET[i];
        }
        
        for (int i = 0; i < LARGE_FONT_SIZE; i++) {
            this.memory[i + LARGE_FONT_START_ADDRESS] = (byte)LARGE_FONT_SET_SCHIP[i];
        }

        // Init empty flag registers
        this.flags = new int[NUM_REGISTERS];
    }

    public void updateTimers() {
        this.delayTimer = Math.max(0, this.delayTimer - 1);
        this.soundTimer = Math.max(0, this.soundTimer - 1);
    }

}

